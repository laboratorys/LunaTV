name: Update Manual Release
on:
  release:
    types: [created]

jobs:
  update-release:
    if: |
      github.event.release.draft == false &&
      github.event.action == 'created'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      RELEASE_TAG: ${{ github.event.release.tag_name }}
      RELEASE_BODY: ${{ toJson(github.event.release.body) }} # 安全传递
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release notes
        id: extract-notes
        run: |
          # 处理版本号
          RELEASE_VERSION="${RELEASE_TAG#v}"
          echo "DEBUG: RELEASE_VERSION=$RELEASE_VERSION"

          # 处理 release notes
          if [ -f CHANGELOG.md ]; then
            RELEASE_NOTES=$(awk -v version="$RELEASE_VERSION" '
              BEGIN {flag=0; count=0}
              /^## \[?v?/ && (index($0, version) > 0) {flag=1; next}
              /^## \[?v?/ && flag {exit}
              flag {print; count++}
              END {if (count==0) exit 1}
            ' CHANGELOG.md)

            if [ $? -ne 0 ]; then
              echo "::warning::Using fallback release notes"
              RELEASE_NOTES=$(echo "$RELEASE_BODY" | jq -r . 2>/dev/null || echo "Failed to parse RELEASE_BODY")
            fi
          else
            echo "::warning::CHANGELOG.md not found, using RELEASE_BODY"
            RELEASE_NOTES=$(echo "$RELEASE_BODY" | jq -r . 2>/dev/null || echo "Failed to parse RELEASE_BODY")
          fi

          # 调试 RELEASE_NOTES 内容
          echo "DEBUG: RELEASE_NOTES=$RELEASE_NOTES"

          # 如果 RELEASE_NOTES 为空，设置默认值
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="No release notes provided."
          fi

          # 格式化输出，清理特殊字符
          NOTES_CONTENT=$(printf '## Release v%s\n%s\n\n_Updated from CHANGELOG.md_' \
            "$RELEASE_VERSION" "$RELEASE_NOTES" | sed "s/'/\\'/g; s/\\r//g")

          # 写入 GITHUB_OUTPUT
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # 调试 GITHUB_OUTPUT 内容
          echo "DEBUG: GITHUB_OUTPUT content:"
          cat "$GITHUB_OUTPUT"

      - name: Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: Release v${{ steps.extract-notes.outputs.version }}
          body: ${{ steps.extract-notes.outputs.notes }}
          draft: false
          prerelease: ${{ github.event.release.prerelease }}
          release_id: ${{ github.event.release.id }}
